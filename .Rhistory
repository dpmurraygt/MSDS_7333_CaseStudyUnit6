offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offlineRedo = readData()
identical(offline, offlineRedo)
pdf(file = "Geo_BoxplotSignalByMacAngle.pdf", width = 7)
oldPar = par(mar = c(3.1, 3, 1, 1))
library(lattice)
bwplot(signal ~ factor(angle) | mac, data = offline,
subset = posX == 2 & posY == 12
& mac != "00:0f:a3:39:dd:cd",
layout = c(2,3))
par(oldPar)
dev.off()
summary(offline$signal)
pdf(file = "Geo_DensitySignalByMacAngle.pdf", width = 8, height = 12)
oldPar = par(mar = c(3.1, 3, 1, 1))
densityplot( ~ signal | mac + factor(angle), data = offline,
subset = posX == 24 & posY == 4 &
mac != "00:0f:a3:39:dd:cd",
bw = 0.5, plot.points = FALSE)
par(oldPar)
dev.off()
#offline = offline[ offline$mac != "00:0f:a3:39:dd:cd", ]
offline$posXY = paste(offline$posX, offline$posY, sep = "-")
byLocAngleAP = with(offline,
by(offline, list(posXY, angle, mac),
function(x) x))
signalSummary =
lapply(byLocAngleAP,
function(oneLoc) {
ans = oneLoc[1, ]
ans$medSignal = median(oneLoc$signal)
ans$avgSignal = mean(oneLoc$signal)
ans$num = length(oneLoc$signal)
ans$sdSignal = sd(oneLoc$signal)
ans$iqrSignal = IQR(oneLoc$signal)
ans
})
offlineSummary = do.call("rbind", signalSummary)
pdf(file = "Geo_BoxplotSignalSDByAvg.pdf", width = 10)
oldPar = par(mar = c(3.1, 3, 1, 1))
breaks = seq(-90, -30, by = 5)
bwplot(sdSignal ~ cut(avgSignal, breaks = breaks),
data = offlineSummary,
subset = mac != "00:0f:a3:39:dd:cd",
xlab = "Mean Signal", ylab = "SD Signal")
par(oldPar)
dev.off()
pdf(file = "Geo_ScatterMean-Median.pdf", width = 10)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
with(offlineSummary,
smoothScatter((avgSignal - medSignal) ~ num,
xlab = "Number of Observations",
ylab = "mean - median"))
abline(h = 0, col = "#984ea3", lwd = 2)
lo.obj =
with(offlineSummary,
loess(diff ~ num,
data = data.frame(diff = (avgSignal - medSignal),
num = num)))
lo.obj.pr = predict(lo.obj, newdata = data.frame(num = (70:120)))
lines(x = 70:120, y = lo.obj.pr, col = "#4daf4a", lwd = 2)
par(oldPar)
dev.off()
oneAPAngle = subset(offlineSummary,
mac == subMacs[5] & angle == 0)
library(fields)
smoothSS = Tps(oneAPAngle[, c("posX","posY")],
oneAPAngle$avgSignal)
vizSmooth = predictSurface(smoothSS)
plot.surface(vizSmooth, type = "C")
points(oneAPAngle$posX, oneAPAngle$posY, pch=19, cex = 0.5)
surfaceSS = function(data, mac, angle = 45) {
require(fields)
oneAPAngle = data[ data$mac == mac & data$angle == angle, ]
smoothSS = Tps(oneAPAngle[, c("posX","posY")],
oneAPAngle$avgSignal)
vizSmooth = predictSurface(smoothSS)
plot.surface(vizSmooth, type = "C",
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
points(oneAPAngle$posX, oneAPAngle$posY, pch=19, cex = 0.5)
}
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = subMacs[ rep(c(5, 1), each = 2) ],
angle = rep(c(0, 135), 2),
data = list(data = offlineSummary))
par(parCur)
offlineSummary = subset(offlineSummary, mac != subMacs[2])
AP = matrix( c( 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs[ -2 ], c("x", "y") ))
AP
diffs = offlineSummary[ , c("posX", "posY")] -
AP[ offlineSummary$mac, ]
offlineSummary$dist = sqrt(diffs[ , 1]^2 + diffs[ , 2]^2)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummary, pch = 19, cex = 0.3,
xlab ="distance")
pdf(file="Geo_ScatterSignalDist.pdf", width = 7, height = 10)
oldPar = par(mar = c(3.1, 3.1, 1, 1))
library(lattice)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummary, pch = 19, cex = 0.3,
xlab ="distance")
par(oldPar)
dev.off()
macs = unique(offlineSummary$mac)
online = readData("Data/online.final.trace.txt", subMacs = macs)
online$posXY = paste(online$posX, online$posY, sep = "-")
length(unique(online$posXY))
tabonlineXYA = table(online$posXY, online$angle)
tabonlineXYA[1:6, ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
byLoc = with(online,
by(online, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x$signal, x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY, names(avgSS)))
cbind(ans, y)
}))
onlineSummary = do.call("rbind", byLoc)
dim(onlineSummary)
names(onlineSummary)
m = 3; angleNewObs = 230
refs = seq(0, by = 45, length  = 8)
nearestAngle = roundOrientation(angleNewObs)
if (m %% 2 == 1) {
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
} else {
m = m + 1
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
if (sign(angleNewObs - nearestAngle) > -1)
angles = angles[ -1 ]
else
angles = angles[ -m ]
}
angles = angles + nearestAngle
angles[angles < 0] = angles[ angles < 0 ] + 360
angles[angles > 360] = angles[ angles > 360 ] - 360
offlineSubset =
offlineSummary[ offlineSummary$angle %in% angles, ]
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY")) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
trainSS = reshapeSS(offlineSubset, varSignal = "avgSignal")
selectTrain = function(angleNewObs, signals = NULL, m = 1){
# m is the number of angles to keep between 1 and 5
refs = seq(0, by = 45, length  = 8)
nearestAngle = roundOrientation(angleNewObs)
if (m %% 2 == 1)
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
else {
m = m + 1
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
if (sign(angleNewObs - nearestAngle) > -1)
angles = angles[ -1 ]
else
angles = angles[ -m ]
}
angles = angles + nearestAngle
angles[angles < 0] = angles[ angles < 0 ] + 360
angles[angles > 360] = angles[ angles > 360 ] - 360
angles = sort(angles)
offlineSubset = signals[ signals$angle %in% angles, ]
reshapeSS(offlineSubset, varSignal = "avgSignal")
}
train130 = selectTrain(130, offlineSummary, m = 3)
head(train130)
length(train130[[1]])
findNN = function(newSignal, trainSubset) {
diffs = apply(trainSubset[ , 4:9], 1,
function(x) x - newSignal)
dists = apply(diffs, 2, function(x) sqrt(sum(x^2)) )
closest = order(dists)
return(trainSubset[closest, 1:3 ])
}
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = 3){
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] =
findNN(newSignal = as.numeric(newSignals[i, ]), trainSS)
}
estXY = lapply(closeXY,
function(x) sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
estXYk3 = predXY(newSignals = onlineSummary[ , 6:11],
newAngles = onlineSummary[ , 4],
offlineSummary, numAngles = 3, k = 3)
estXYk1 = predXY(newSignals = onlineSummary[ , 6:11],
newAngles = onlineSummary[ , 4],
offlineSummary, numAngles = 3, k = 1)
floorErrorMap = function(estXY, actualXY, trainPoints = NULL, AP = NULL){
plot(0, 0, xlim = c(0, 35), ylim = c(-3, 15), type = "n",
xlab = "", ylab = "", axes = FALSE)
box()
if ( !is.null(AP) ) points(AP, pch = 15)
if ( !is.null(trainPoints) )
points(trainPoints, pch = 19, col="grey", cex = 0.6)
points(x = actualXY[, 1], y = actualXY[, 2],
pch = 19, cex = 0.8 )
points(x = estXY[, 1], y = estXY[, 2],
pch = 8, cex = 0.8 )
segments(x0 = estXY[, 1], y0 = estXY[, 2],
x1 = actualXY[, 1], y1 = actualXY[ , 2],
lwd = 2, col = "red")
}
trainPoints = offlineSummary[ offlineSummary$angle == 0 &
offlineSummary$mac == "00:0f:a3:39:e1:c0" ,
c("posX", "posY")]
pdf(file="GEO_FloorPlanK3Errors.pdf", width = 10, height = 7)
oldPar = par(mar = c(1, 1, 1, 1))
floorErrorMap(estXYk3, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
par(oldPar)
dev.off()
pdf(file="GEO_FloorPlanK1Errors.pdf", width = 10, height = 7)
oldPar = par(mar = c(1, 1, 1, 1))
floorErrorMap(estXYk1, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
par(oldPar)
dev.off()
calcError =
function(estXY, actualXY)
sum( rowSums( (estXY - actualXY)^2) )
actualXY = onlineSummary[ , c("posX", "posY")]
sapply(list(estXYk1, estXYk3), calcError, actualXY)
v = 11
permuteLocs = sample(unique(offlineSummary$posXY))
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
offline = offline[ offline$mac != "00:0f:a3:39:dd:cd", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
onlineCVSummary = reshapeSS(offline, keepVars = keepVars,
sampleAngle = TRUE)
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
K = 20
err = rep(0, K)
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
}
}
pdf(file = "Geo_CVChoiceOfK.pdf", width = 10, height = 6)
oldPar = par(mar = c(4, 3, 1, 1))
plot(y = err, x = (1:K),  type = "l", lwd= 2,
ylim = c(1200, 2100),
xlab = "Number of Neighbors",
ylab = "Sum of Square Errors")
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
segments(x0 = 0, x1 = kMin, y0 = rmseMin, col = gray(0.4),
lty = 2, lwd = 2)
segments(x0 = kMin, x1 = kMin, y0 = 1100,  y1 = rmseMin,
col = grey(0.4), lty = 2, lwd = 2)
#mtext(kMin, side = 1, line = 1, at = kMin, col = grey(0.4))
text(x = kMin - 2, y = rmseMin + 40,
label = as.character(round(rmseMin)), col = grey(0.4))
par(oldPar)
dev.off()
estXYk5 = predXY(newSignals = onlineSummary[ , 6:11],
newAngles = onlineSummary[ , 4],
offlineSummary, numAngles = 3, k = 5)
calcError(estXYk5, actualXY)
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = 3){
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] = findNN(newSignal = as.numeric(newSignals[i, ]),
trainSS)
}
estXY = lapply(closeXY, function(x)
sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
mapply(surfaceSS, mac = subMacs[ rep(c(5, 1), each = 2)], angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
mapply(surfaceSS, mac = subMacs[ rep(c(5, 1), each = 2)], angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
mapply(surfaceSS, mac = 00:0f:a3:39:e1:c0, angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
mapply(surfaceSS, mac = "00:0f:a3:39:e1:c0", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
par(parCur)
mapply(surfaceSS, mac = "00:0f:a3:39:e1:c0", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:e1:c0", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
#This is the one that was dropped
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
View(surfaceSS)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:e1:c0", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
View(offlineSummary)
offlineSummary2 = do.call("rbind", signalSummary)
#This is the one that was dropped
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135), 2), data = list(data = offlineSummary))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135), 2), data = list(data = offlineSummary2))
#This is the one that was dropped
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offLineSummary2$orientation)
unique(offlineSummary2$orientation)
#This is the one that was dropped
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(3,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135,180), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
parCur = par(mfrow = c(4,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:e1:c0", angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
#This is the one that was dropped
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(3,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(4,2), mar = rep(1, 4))
mapply(surfaceSS, mac = "00:0f:a3:39:dd:cd", angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
mapply(surfaceSS, mac = compareMacList[rep(each=2)], angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(4,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(each=2)], angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
mapply(surfaceSS, mac = compareMacList, angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(4,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(0, 135,180, 270), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(0, 135), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 270), 2), data = list(data = offlineSummary2))
par(parCur)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data=list(data=offlineSummary2))
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data = list(data = offlineSummary2))
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data = offlineSummary2)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 270), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 180, 270), 2), data = list(data = offlineSummary2))
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,3), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 180, 270), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,3), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 180, 270), 3), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 45, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,3), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 180, 270), 3), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,3), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 270), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 270), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(45, 135), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
#This is the one that was dropped
compareMacList <- c("00:0f:a3:39:dd:cd", "00:0f:a3:39:e1:c0")
offlineSummary2 = do.call("rbind", signalSummary)
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = compareMacList[rep(c(1,2), each=2)], angle = rep(c(90, 135), 2), data = list(data = offlineSummary2))
par(parCur)
surfaceSS(mac="00:0f:a3:39:e1:c0", angle = 180, data = offlineSummary2)
#Nolan, Deborah; Lang, Duncan Temple. Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving (Chapman & Hall/CRC The R Series) (Page 28). CRC Press. Kindle Edition.
unique(offlineSummary2$orientation)
View(onlineSummary)
View(online)
update.packageStatus()
update.packages()
trace(utils:::unpackPkgZip, edit=TRUE)
update.packages()
