calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
#pdf(file = "Images/Geo_CVChoiceOfK.pdf", width = 8, height = 6)
oldPar = par(mar = c(4, 3, 1, 1))
plot(y = err, x = (1:K),  type = "l", lwd= 2,
ylim = c(0, 2100),
xlab = "Number of Neighbors",
ylab = "Sum of Square Errors")
lines(y=err_wtd, x=1:K, lty = 2, lwd=2, col='red')
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
rmseMin_wtd = min(err_wtd)
kMin_wtd = which(err_wtd == rmseMin_wtd)[1]
#this one requires special version of reshapeSS
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 7,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
permuteLocs = sample(unique(offlineSummary$posXY))
# to calculate folds, build a matrix with 11 columns and ~15 locations each
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# get the first validation fold from our offline data
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
# must re-summarize each fold to match onlineSummary format
# selecting orientation at random to create our CV folds
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# exclude MAC
offline2 = offline[ offline$mac != "00:0f:a3:39:e1:c0", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# build CV base from offline data in general
onlineCVSummary = reshapeSS(offline2, keepVars = keepVars,
sampleAngle = TRUE)
# an example of one fold
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# this is our training set
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
# using both methods with k = 3
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
#pdf(file = "Images/Geo_CVChoiceOfK.pdf", width = 8, height = 6)
oldPar = par(mar = c(4, 3, 1, 1))
plot(y = err, x = (1:K),  type = "l", lwd= 2,
ylim = c(0, 2100),
xlab = "Number of Neighbors",
ylab = "Sum of Square Errors")
lines(y=err_wtd, x=1:K, lty = 2, lwd=2, col='red')
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
rmseMin_wtd = min(err_wtd)
kMin_wtd = which(err_wtd == rmseMin_wtd)[1]
calcError(estFold, actualFold)
View(calcError)
View(findWtdNN)
permuteLocs = sample(unique(offlineSummary$posXY))
# to calculate folds, build a matrix with 11 columns and ~15 locations each
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# get the first validation fold from our offline data
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
# must re-summarize each fold to match onlineSummary format
# selecting orientation at random to create our CV folds
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# exclude MAC
offline2 = offline[ offline$mac != "00:0f:a3:39:dd:cd", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# build CV base from offline data in general
onlineCVSummary = reshapeSS(offline2, keepVars = keepVars,
sampleAngle = TRUE)
# an example of one fold
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# this is our training set
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
# using both methods with k = 3
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
#err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
View(estFold)
View(actualFold)
err
range(err)
#define the functions I'm going to use in this section
#predXY takes an input of newSignales, their angles, and returns the estimated positions
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = 3){
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] = findNN(newSignal = as.numeric(newSignals[i, ]),
trainSS)
}
estXY = lapply(closeXY, function(x)
sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
#reshapeSS takes the "offline" format of one signal per observation and makes it into the format of
#onlineCVSummary, where each record is a x,y position, and signal strength of each access point at that location
#and they hard coded ncol into that.  Who does that?
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
#define the functions I'm going to use in this section
#predXY takes an input of newSignales, their angles, and returns the estimated positions
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = 3){
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] = findNN(newSignal = as.numeric(newSignals[i, ]),
trainSS)
}
estXY = lapply(closeXY, function(x)
sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
#reshapeSS takes the "offline" format of one signal per observation and makes it into the format of
#onlineCVSummary, where each record is a x,y position, and signal strength of each access point at that location
#and they hard coded ncol into that.  Who does that?
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
#This case is as the authors worked the problem, excluding dd:cd
permuteLocs = sample(unique(offlineSummary$posXY))
# to calculate folds, build a matrix with 11 columns and ~15 locations each
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# get the first validation fold from our offline data
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
# must re-summarize each fold to match onlineSummary format
# selecting orientation at random to create our CV folds
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# exclude MAC
offline2 = offline[ offline$mac != "00:0f:a3:39:dd:cd", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# build CV base from offline data in general
onlineCVSummary = reshapeSS(offline2, keepVars = keepVars,
sampleAngle = TRUE)
# an example of one fold
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# this is our training set
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
# using both methods with k = 3
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
#err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
range(err)
err
permuteLocs = sample(unique(offlineSummary$posXY))
# to calculate folds, build a matrix with 11 columns and ~15 locations each
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# get the first validation fold from our offline data
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
# must re-summarize each fold to match onlineSummary format
# selecting orientation at random to create our CV folds
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# exclude MAC
offline2 = offline[ offline$mac != "00:0f:a3:39:e1:c0", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# build CV base from offline data in general
onlineCVSummary = reshapeSS(offline2, keepVars = keepVars,
sampleAngle = TRUE)
# an example of one fold
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# this is our training set
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
# using both methods with k = 3
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
#pdf(file = "Images/Geo_CVChoiceOfK.pdf", width = 8, height = 6)
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
range(err)
err
#this one requires special version of reshapeSS
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 7,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
permuteLocs = sample(unique(offlineSummary$posXY))
# to calculate folds, build a matrix with 11 columns and ~15 locations each
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# get the first validation fold from our offline data
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
# must re-summarize each fold to match onlineSummary format
# selecting orientation at random to create our CV folds
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# exclude MAC
offline2 = offline[ offline$mac != "00:0f:a3:39:e1:c0", ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# build CV base from offline data in general
onlineCVSummary = reshapeSS(offline2, keepVars = keepVars,
sampleAngle = TRUE)
# an example of one fold
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# this is our training set
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -1])
# using both methods with k = 3
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3)
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold)
# formally test K out to 20 neighbors
K = 20
err = rep(0, K)
#err_wtd = rep(0,K) # weighted error
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummary,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:11],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = k)
err[k] = err[k] + calcError(estFold, actualFold)
#estFold_wtd = predXYwtd(newSignals = onlineFold[ , 6:11], # add in weighted calculations
#                 newAngles = onlineFold[ , 4],
#                 offlineFold, numAngles = 3, k = k)
#err_wtd[k] = err_wtd[k] + calcError(estFold_wtd, actualFold)
}
}
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
range(err)
